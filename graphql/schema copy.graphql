type Allow @guard {
    id: ID!
}

type Chat @guard {
    id: ID!
    user1: User @belongsTo(relation: "user1")
    user2: User @belongsTo(relation: "user2")
    messages: [Message!]! @hasMany
}

enum BlockStatus {
    active
    removed
}

type DriverBlock @guard {
    id: ID!
    reason: String!
    status: BlockStatus!
    user: User @belongsTo(relation: "user")
}


enum MessageStatus {
    sent
    read
}

type Message @guard {
    id: ID!
    chat: Chat @belongsTo(relation: "chat")
    sender: User @belongsTo(relation: "sender")
    message: String!
    status: MessageStatus!
}


enum PaymentStatus {
    pending
    completed
    failed
}

enum PaymentMethod {
    cash
    mercadopago
}

type Payment @guard {
    id: ID!
    transaction: Int!
    amount: Float!
    payment_method: PaymentMethod!
    status: PaymentStatus!
    reservation: Reservation @belongsTo(relation: "reservation")
}


type Rating @guard {
    id: ID!
    rating: Int!
    comment: String!
    trip: Trip @belongsTo
    user: User @belongsTo
    driver: User @belongsTo(relation: driver)
}


enum ReservationStatus {
    pending
    in_progress
    completed
    canceled
}

type Reservation @guard {
    id: ID!
    status: ReservationStatus!
    trip: Trip @belongsTo
    user: User @belongsTo
    payment: Payment @hasOne
}


type Tag @guard {
    id: ID!
    name: String!
    trips: [Trip!]! @belongsToMany(relation: "trips")
}


enum TransactionStatus {
    pending
    processed
    failed
}

type Transaction @guard {
    id: ID!
    transaction: Int!
    amount: Float!
    company_final_amount: Float!
    status: TransactionStatus!
    user_id: User @belongsTo(relation: "user")
}

type Trip @guard {
    id: ID!
    origin: String!
    destination: String!
    date: String!
    available_seats: Int!
    price: Float!
    vehicle: Vehicle @belongsTo
    reservations: [Reservation!]! @hasMany
    ratings: [Rating!]! @hasMany
    tags: [Tag!]! @belongsToMany(relation: "tags")
}

#inputs
input CreateTripInput {
    origin: String!
    destination: String!
    date: String!
    available_seats: Int!
    price: Float!
    vehicle_id: ID!
    tagIds: [ID!]
}

input UpdateTripInput {
    id: ID!
    origin: String
    destination: String
    date: String
    available_seats: Int
    price: Float
    vehicle_id: ID
    tagIds: [ID!]
}

type User @guard {
    id: ID!
    dni: String!
    firstname: String!
    lastname: String!
    email: String!
    phone: String!
    validated: Boolean!
    cvu: String!
    pending_balance: String!
    vehicles: [Vehicle!]! @hasMany
    reservations: [Reservation!]! @hasMany
    transactions: [Transaction!]! @hasMany
    chats: [Chat!]! @hasMany
    messages: [Message!]! @hasMany
    ratings: [Rating!]! @hasMany
    driverBlocks: [DriverBlock!]! @hasMany
}


type Vehicle @guard {
    id: ID!
    user_id: ID!
    brand: String!
    model: String!
    year: Int!
    license_plate: String!
    dnrpa_approved: Boolean!
    user: User @belongsTo
    trips: [Trip!]! @hasMany
}

type Mutation @guard {
    #Chats
    createChat(user1_id: ID!, user2_id: ID!): Chat! @create
    deleteChat(id: ID! @eq): Boolean! @delete(model: Chat)

    #DriverBlock
    createDriverBlock(reason: String!, status: BlockStatus!, user_id: ID!): DriverBlock! @create
    updateDriverBlock(id: ID!, status: BlockStatus): DriverBlock! @update
    deleteDriverBlock(id: ID! @eq): Boolean! @delete(model: DriverBlock)

    #Message
    createMessage(chat_id: ID!, sender_id: ID!, message: String!, status: MessageStatus!): Message! @create
    updateMessage(id: ID!, status: MessageStatus): Message! @update
    deleteMessage(id: ID! @eq): Boolean! @delete(model: Message)

    #Payments
    createPayment(transaction: Int!, amount: Float!, payment_method: PaymentMethod!, status: PaymentStatus!, reservation_id: ID!): Payment! @create
    updatePayment(id: ID!, status: PaymentStatus): Payment! @update
    deletePayment(id: ID! @eq): Boolean! @delete(model: Payment)

    #Ratings
    createRating(rating: Int!, comment: String!, trip_id: ID!, user_id: ID!, driver_id: ID!): Rating! @create
    updateRating(id: ID!, rating: Int, comment: String): Rating! @update
    deleteRating(id: ID! @eq): Boolean! @delete(model: Rating)

    #Reservations
    createReservation(status: String!, trip_id: ID!, user_id: ID!): Reservation! @create
    updateReservation(id: ID!, status: String): Reservation! @update
    deleteReservation(id: ID! @eq): Boolean! @delete(model: Reservation)

    #Tags
    createTag(name: String!): Tag! @create
    updateTag(id: ID!, name: String): Tag! @update
    deleteTag(id: ID! @eq): Boolean! @delete(model: Tag)

    #Transactions
    createTransaction(transaction: Int!, amount: Float!, company_final_amount: Float!, status: TransactionStatus!, user_id: ID!): Transaction! @create
    updateTransaction(id: ID!, status: TransactionStatus): Transaction! @update
    deleteTransaction(id: ID! @eq): Boolean! @delete(model: Transaction)

    #Actualizar User
    updateUser(id: ID!, dni: String, firstname: String, lastname: String, email: String, phone: String, validated: Boolean, cvu: String, pending_balance: String): User @update

    #Trips
    createTrip(input: CreateTripInput!): Trip @field(resolver: "TripResolver@createTrip")
    updateTrip(input: UpdateTripInput!): Trip @field(resolver: "TripResolver@updateTrip")
    deleteTrip(id: ID!): Boolean @field(resolver: "TripResolver@deleteTrip")

    #Vehicles
    createVehicle(user_id: ID!, brand: String!, model: String!, year: Int!, license_plate: String!, dnrpa_approved: Boolean!): Vehicle! @create
    updateVehicle(id: ID!, brand: String, model: String, year: Int, license_plate: String): Vehicle! @update
    deleteVehicle(id: ID! @eq): Boolean! @delete(model: Vehicle)
}

type Query @guard {
    # ALLOWS
    allows: [Allow!]! @all(model: "Allow")
    allow(id: ID @eq): Allow @find(model: "Allow")

    # CHATS
    chats: [Chat!]! @all(model: "Chat")
    chat(id: ID @eq): Chat @find(model: "Chat")

    # DRIVER BLOCKS
    driverBlocks: [DriverBlock!]! @all(model: "DriverBlock")
    driverBlock(id: ID @eq): DriverBlock @find(model: "DriverBlock")

    # MESSAGES
    messages: [Message!]! @all(model: "Message")
    message(id: ID @eq): Message @find(model: "Message")

    # PAYMENTS
    payments: [Payment!]! @all(model: "Payment")
    payment(id: ID @eq): Payment @find(model: "Payment")

    # RATINGS
    ratings: [Rating!]! @all(model: "Rating")
    rating(id: ID @eq): Rating @find(model: "Rating")

    # RESERVATIONS
    reservations: [Reservation!]! @all(model: "Reservation")
    reservation(id: ID @eq): Reservation @find(model: "Reservation")

    # TAGS
    tags: [Tag!]! @all(model: "Tag")
    tag(id: ID @eq): Tag @find(model: "Tag")

    # TRANSACTIONS
    transactions: [Transaction!]! @all(model: "Transaction")
    transaction(id: ID @eq): Transaction @find(model: "Transaction")

    # TRIPS
    trips: [Trip!]! @all(model: "Trip")
    trip(id: ID @eq): Trip @find(model: "Trip")

    # USERS
    users: [User!]! @all(model: "User")
    user(id: ID @eq): User @find(model: "User")

    # VEHICLES
    vehicles: [Vehicle!]! @all(model: "Vehicle")
    vehicle(id: ID @eq): Vehicle @find(model: "Vehicle")
}


